digraph G {
    node [shape = circle;];
    subgraph {
        node [shape = doublecircle;];
        multiply;
        division;
        plus;
        minus;
        concat;
        assign;
        equal;
        gt;
        ge;
        lt;
        le;
        semicolon;
        lBracket;
        rBracket;
        lCurlyBracket;
        rCurlyBracket;
        notEqual;
        integer;
        floatIntDotInt;
        floatIntAfterExponent;
        stringEnd;
        startPrologEnd;
        epilog1;
        epilog2;
        identifier;
        colon;
        comma;
        EOF;
    }
    
    start -> multiply [label = "*";];
    
    start -> division [label = "/";];
    division -> lineComment [label = "/";];
    lineComment -> lineComment [label = "^\\n";];
    lineComment -> start [label = "\\n";];
    division -> blockComment [label = "*";];
    blockComment -> expectEndBlockComment [label = "*";];
    expectEndBlockComment -> blockComment [label = "^/";];
    expectEndBlockComment -> start [label = "/";];
    
    start -> plus [label = "+";];
    
    start -> minus [label = "-";];
    
    start -> concat [label = ".";];
    
    start -> comma [label = ",";];
    
    start -> assign [label = "=";];
    assign -> expectEqual [label = "=";];
    expectEqual -> equal [label = "=";];
    
    start -> gt [label = ">";];
    gt -> ge [label = "=";];
    
    start -> lt [label = "<";];
    lt -> le [label = "=";];
    lt -> expectStartProlog1 [label = "?";];
    expectStartProlog1 -> expectStartProlog2 [label = "p";];
    expectStartProlog2 -> expectStartProlog3 [label = "h";];
    expectStartProlog3 -> expectStartProlog4 [label = "p";];
    expectStartProlog4 -> startPrologEnd [label = "whitespace";];
    
    start -> enableNull [label = "?";];
    enableNull -> identifier [label = "a-z";];
    // after ? we expect indetifier type, which is always only lower-case
    enableNull -> epilog1 [label = ">";];
    epilog1 -> epilog2 [label = "\\n";];
    
    start -> exclPoint [label = "!";];
    exclPoint -> expectNotEqual [label = "=";];
    expectNotEqual -> notEqual [label = "=";];
    
    start -> semicolon [label = ";";];
    
    start -> lBracket [label = "(";];
    
    start -> rBracket [label = ")";];
    
    start -> lCurlyBracket [label = "{";];
    
    start -> rCurlyBracket [label = "}";];
    
    start -> integer [label = "0-9";];
    integer -> integer [label = "0-9";];
    integer -> floatIntDotInt [label = ".";];
    floatIntDotInt -> floatIntDotInt [label = "0-9";];
    integer -> exponent [label = "eE";];
    exponent -> plusMinus [label = "+-";];
    plusMinus -> floatIntAfterExponent [label = "0-9";];
    exponent -> floatIntAfterExponent [label = "0-9";];
    floatIntAfterExponent -> floatIntAfterExponent [label = "0-9";];
    floatIntDotInt -> exponent [label = "eE";];
    
    start -> string [label = "\"";];
    string -> string [label = "(char>31)&&(char!='\\')&&(char != '$')";];
    string -> escapeSeq [label = "\\";];
    escapeSeq -> string [label = "(char>31)";];
    string -> stringEnd [label = "\"";];
    
    start -> start [label = "whitespace";];
    
    start -> identifier [label = "a-zA-Z_";];
    identifier -> identifier [label = "a-zA-Z0-9_";];
    
    start -> colon [label = ":";];
    
    start -> variable [label = "$";];
    variable -> identifier [label = "a-zA-Z_";];
    
    start -> EOF [label = "EOF";];
}