1.  S -> PROG
2.  PROG -> START_PROLOG CODE END_PROLOG 

3.  START_PROLOG -> startProlog function("declare") ( function("strict_types") = integer(1) ) ;

4.  END_PROLOG -> endOfFile
5.  END_PROLOG -> endProlog endOfFile  

6.  CODE -> eps 
7.  CODE -> INNER_SCOPE CODE
8.  CODE -> FUNC_DECLARE CODE

9.  BODY -> INNER_SCOPE BODY
10. BODY -> eps 

11. INNER_SCOPE -> IF_ELSE 
12. INNER_SCOPE -> return RETURN_VALUE ; 
13. INNER_SCOPE -> while ( EXP ) { BODY } 
14. INNER_SCOPE -> { BODY } 
15. INNER_SCOPE -> FUNC_CALL
16. INNER_SCOPE -> variable = RIGHT_SIDE ;

17. RIGHT_SIDE -> STRING_NT 
18. RIGHT_SIDE -> EXP 
19. RIGHT_SIDE -> FUNC_CALL 

20. RETURN_VALUE -> eps
21. RETURN_VALUE -> EXP 
22. RETURN_VALUE -> STRING_NT

23. RETURN_TYPE -> ARG_TYPE
24. RETURN_TYPE -> void

25. FUNC_CALL -> function_id ( FUNC_CALL_ARGS ) ; 
26. FUNC_CALL_ARGS -> eps
27. FUNC_CALL_ARGS -> ARG NEXT_ARG
28. NEXT_ARG -> eps
29. NEXT_ARG -> , ARG NEXT_ARG
30. ARG -> variable
31. ARG -> LITERAL 
32. LITERAL -> float_lit
33. LITERAL -> int_lit
34. LITERAL -> null
35. LITERAL -> string_lit

36. STRING_NT -> FIRST_STRING CONCAT_NT 
37. FIRST_STRING -> variable
38. FIRST_STRING -> string_lit

39. CONCAT_NT -> . FIRST_STRING CONCAT_NT
40. CONCAT_NT -> eps

41. FUNC_DECLARE -> function function_id ( FUNC_DECLARE_BODY ) : RETURN_TYPE { BODY } 
42. FUNC_DECLARE_BODY -> eps
43. FUNC_DECLARE_BODY -> ARG_TYPE variable FUNC_DECLARE_BODY
44. FUNC_DECLARE_BODY -> , ARG_TYPE variable FUNC_DECLARE_BODY
45. ARG_TYPE -> string
46. ARG_TYPE -> int
47. ARG_TYPE -> float
48. IF_ELSE -> if ( EXP ) { BODY } else { BODY } 
49. FIRST_STRING -> null


terminals:
	if,
	else,
	while,
	function
	function_id,
	int,
	float,
	string,
	void,
	null,
	return,
	=
	startProlog,
	endProlog,
	;
	(
	)
	{
	}
	.
	:
	,
	variable,
	string_lit
	int_lit
	float_lit
	eps

