1. S -> PROG
2. PROG -> START_PROLOG CODE END_PROLOG 

3. START_PROLOG -> startProlog function("declare") ( function("strict_types") = integer(1) ) ;

4. END_PROLOG -> endOfFile
5. END_PROLOG -> endProlog endOfFile  

6. CODE -> eps 
7. CODE -> INNER_SCOPE CODE
8. CODE -> FUNC_DECLARE CODE

9. BODY -> INNER_SCOPE BODY
10. BODY -> eps 

11. INNER_SCOPE -> IF_ELSE 
12. INNER_SCOPE -> return RETURN_VALUE ; 
13. INNER_SCOPE -> while ( EXP ) { BODY } 
14. INNER_SCOPE -> { BODY } 
15. INNER_SCOPE -> FUNC_CALL


------------------- OUT OF GRAMMAR ------------------
16. INNER_SCOPE -> DECIDE ;

17. DECIDE -> variable OPERATOR -> EXP
18. DECIDE -> LITERAL -> EXP
19. DECIDE -> variable = -> BACK_TO_GRAMMAR
------------------- OUT OF GRAMMAR ------------------ 

------------------- WEIRD STUFF IN GRAMMAR ------------------ 
37. BACK_TO_GRAMMAR -> FUNC_CALL
38. BACK_TO_GRAMMAR -> EXP

50. OPERATOR -> +
51. OPERATOR -> -
52. OPERATOR -> *
53. OPERATOR -> /
------------------- WEIRD STUFF IN GRAMMAR ------------------ 


21. RETURN_VALUE -> eps
22. RETURN_VALUE -> EXP 

24. RETURN_TYPE -> ARG_TYPE
25. RETURN_TYPE -> void

26. FUNC_CALL -> function_id ( FUNC_CALL_ARGS ) ; 
27. FUNC_CALL_ARGS -> eps
28. FUNC_CALL_ARGS -> ARG NEXT_ARG
29. NEXT_ARG -> eps
30. NEXT_ARG -> , ARG NEXT_ARG
31. ARG -> variable
32. ARG -> LITERAL 
33. LITERAL -> float_lit
34. LITERAL -> int_lit
35. LITERAL -> null
36. LITERAL -> string_lit

42. FUNC_DECLARE -> function function_id ( FUNC_DECLARE_BODY ) : RETURN_TYPE { BODY } 
43. FUNC_DECLARE_BODY -> eps
44. FUNC_DECLARE_BODY -> ARG_TYPE variable FUNC_DECLARE_BODY
45. FUNC_DECLARE_BODY -> , ARG_TYPE variable FUNC_DECLARE_BODY
46. ARG_TYPE -> string
47. ARG_TYPE -> int
48. ARG_TYPE -> float
49. IF_ELSE -> if ( EXP ) { BODY } else { BODY } 


terminals:
	if,
	else,
	while,
	function
	function_id,
	int,
	float,
	string,
	void,
	null,
	return,
	=
	startProlog,
	endProlog,
	endOfFile,
	;
	(
	)
	{
	}
	:
	,
	variable,
	string_lit
	int_lit
	float_lit
	eps
	.
	+
	-
	*
	/
	<
	>
	<=
	>=
	===
	!==



nonterminals:
	S,
    PROG,
    START_PROLOG,
    END_PROLOG,
    CODE,
    BODY,
    INNER_SCOPE,
    RETURN_VALUE,
    RETURN_TYPE,
    FUNC_CALL,
    FUNC_CALL_ARGS,
    NEXT_ARG,
    ARG,
    LITERAL,
    FUNC_DECLARE,
    FUNC_DECLARE_BODY,
    ARG_TYPE,
    IF_ELSE

