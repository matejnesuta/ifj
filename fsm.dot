digraph G {
    node [shape=circle]{
        node [shape=doublecircle]
        multiply, EOL, blockCommentEnd, division, plus, minus
        concat, assign, equal, gt, ge, lt, le, semicolon
        lBracket,rBracket, lCurlyBracket, rCurlyBracket, notEqual
        integer, float, endQuotes
    }
    start -> multiply [label = "*";];
    start -> division [label = "/";];
    division -> lineComment [label="/"]
    lineComment -> lineComment [label="^\\n"]
    lineComment -> EOL [label="\\n"]
    division -> blockComment [label="*"]
    blockComment -> expectEnd[label="*"]
    expectEnd -> blockCommentEnd[label="/"]
    expectEnd -> blockComment[label="^/"]
    start -> plus[label="+"]
    start -> minus[label="-"]
    start -> concat[label="."]
    start -> assign[label="="]
    assign -> assign[label="^="]
    assign -> expectEqual[label="="]
    expectEqual -> equal[label="="]
    start -> gt[label=">"]
    gt -> ge[label="="]
    start -> lt[label="<"]
    lt -> le[label="="]
    start -> exclPoint[label="!"]
    exclPoint -> expectNotEqual[label="="]
    expectNotEqual -> notEqual[label="="]
    start -> semicolon[label=";"]
    start -> lBracket[label="("]
    start -> rBracket[label=")"]
    start -> lCurlyBracket[label="{"]
    start -> rCurlyBracket[label="}"]
    start -> integer[label="0-9"]
    integer -> integer[label="0-9"]
    
    integer -> expFloat[label="."]
    expFloat -> intDotInt[label="0-9"]
    intDotInt -> intDotInt[label="0-9"]
    intDotInt -> float

    integer -> exp1[label="eE"]
    exp1 -> intAfterExp[label="0-9"]
    exp1 -> plusMinus1[label="+-"]
    plusMinus1 -> intAfterExp[label="0-9"]
    intAfterExp -> intAfterExp[label="0-9"]
    intAfterExp -> float
    intDotInt -> exp1[label="eE"]

    start -> startQuotes[label="\""]
    startQuotes -> endQuotes[label="\""]
    startQuotes -> text[label="cokoliv"]
    text -> escapeSeq[label="\\"]
    text -> text[label="^\\"]
    escapeSeq -> text[label="cokoliv"]
    text -> endQuotes[label="\""]
    
    
}