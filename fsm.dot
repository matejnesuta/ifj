digraph G {
    node [shape=circle]{
        node [shape=doublecircle]
        multiply, EOL, blockCommentEnd, divisionSign, plus, minus
        concat, assign, equal, gt, ge, lt, le, semicolon
        lBracket,rBracket, lCurlyBracket, rCurlyBracket, notEqual
        integer, float, endQuotes
    }
    start -> multiply [label = "*";];
    start -> divisionSign [label = "/";];
    divisionSign -> divisionSign [label = "^[/*]"]
    divisionSign -> lineComment [label="/"]
    lineComment -> lineComment [label="^\\n"]
    lineComment -> EOL [label="\\n"]
    divisionSign -> blockComment [label="*"]
    blockComment -> expectEnd[label="*"]
    expectEnd -> blockCommentEnd[label="/"]
    expectEnd -> blockComment[label="^/"]
    start -> plus[label="+"]
    start -> minus[label="-"]
    start -> concat[label="."]
    start -> assign[label="="]
    assign -> assign[label="^="]
    assign -> expectEqual[label="="]
    expectEqual -> equal[label="="]
    start -> gt[label=">"]
    gt -> ge[label="="]
    start -> lt[label="<"]
    lt -> le[label="="]
    start -> exclPoint[label="!"]
    exclPoint -> expectNotEqual[label="="]
    expectNotEqual -> notEqual[label="="]
    start -> semicolon[label=";"]
    start -> lBracket[label="("]
    start -> rBracket[label=")"]
    start -> lCurlyBracket[label="{"]
    start -> rCurlyBracket[label="}"]
    start -> integer[label="0-9"]
    integer -> integer[label="0-9"]
    
    integer -> expFloat[label="."]
    expFloat -> intDotInt[label="0-9"]
    intDotInt -> intDotInt[label="0-9"]
    intDotInt -> float

    integer -> exp1[label="eE"]
    exp1 -> intAfterExp[label="0-9"]
    exp1 -> plusMinus1[label="+-"]
    plusMinus1 -> intAfterExp[label="0-9"]
    intAfterExp -> intAfterExp[label="0-9"]
    intAfterExp -> float

    intDotInt -> exp1[label="eE"]

    

    //Test
    start -> quotes[label="''"]
    quotes -> quotes[label="a-zA-Z0-9"]
    quotes -> endQuotes[label="''"]
    quotes -> escapeSeq[label="/"] //tady je potreba \
    escapeSeq -> nSeq[label="n"]
    escapeSeq -> rSeq[label="r"]
    escapeSeq -> tSeq[label="t"]
    escapeSeq -> vSeq[label="e"]
    escapeSeq -> fSeq[label="f"]
    escapeSeq -> backSeq[label="/"] // zase \
    escapeSeq -> dollarSeq[label="$"]
    escapeSeq -> quoteSeq[label="''"] //hmmm.....

    escapeSeq -> xSeq[label="x"]
    xSeq -> zeroHex[label="0"]
    xSeq -> charHex[label="a-fA-F"]
    charHex -> charHex2[label="a-fA-F"] //to do
    zeroHex -> numHex[label="1-9"]

    escapeSeq -> firstOctal[label="0-2"]
    escapeSeq -> firstOctal2[label="3"]
    firstOctal -> secondOctal[label="0-9"]
    firstOctal2 -> secondOctal2[label="0-7"]
    secondOctal -> thirdOctal1[label="1-9"]
    secondOctal2 -> thirdOctal2[label="0-7"]

    nSeq -> quotes[label=""]
    rSeq -> quotes[label=""]
    tSeq -> quotes[label=""]
    vSeq -> quotes[label=""]
    fSeq -> quotes[label=""]
    backSeq -> quotes[label=""]
    dollarSeq -> quotes[label=""]
    quoteSeq -> quotes[label=""]
    thirdOctal1 -> quotes[label=""]
    thirdOctal2 -> quotes[label=""]
    charHex2 -> quotes[label=""]
    numHex -> quotes[label=""]
}